#include "userprog/syscall.h"
#include <stdio.h>
#include <syscall-nr.h>
#include "threads/interrupt.h"
#include "threads/thread.h"
#include <devices/shutdown.h>
#include <filesys/filesys.h>
#include <filesys/file.h>
#include <devices/input.h>
#include "userprog/process.h"
#include "threads/synch.h"
#include "threads/malloc.h"
static void syscall_handler (struct intr_frame *);
void check_address(void *addr);
void get_argument(void *esp, int *arg, int argc);
void halt (void);
void exit (int status);
bool create (const char *file, unsigned int initial_size);
bool remove (const char *file);
tid_t exec (char *process_name);
int wait (tid_t tid);
int write(int fd, void* buffer, unsigned size);
int read(int fd, void* buffer, unsigned size);
int filesize(int fd);
int open(const char* file);
void seek(int fd, unsigned position);
unsigned tell(int fd);
void close(int fd);
void
syscall_init (void)
{
lock_init (&filesys_lock);
intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
}
static void
syscall_handler (struct intr_frame *f UNUSED)
{
unsigned int *esp = (unsigned int*)(f->esp); //stack pointer
check_address(esp);
int sys_call_num = *(int*)esp; //store system call number
int arg[10];
esp++; //스택 값 증가
check_address(esp);
switch(sys_call_num)
  {
	case SYS_HALT:
	{
		halt();
		
	}
	break;	
	case SYS_EXIT:	
	{
		get_argument(esp,arg,1);		
		int status=arg[0];		
		exit(status);
	}
	break;		
	case SYS_CREATE:
	{
		get_argument(esp,arg,2);
		f->eax=create((const char *)arg[0],(unsigned int)arg[1]); 
	}
	break;		
	case SYS_REMOVE:
	{
		get_argument(esp,arg,1);	
		f->eax=remove((const char *)arg[0]);	
	}
	break;	
	case SYS_EXEC:
	{
		get_argument(esp,arg,1);
		char * cmd_line= (char*)arg[0];		
		f->eax=exec(cmd_line);
		
	}
	break;
 	case SYS_WAIT:
        {
		get_argument(esp,arg,1);
		f->eax=wait(arg[0]);
        }
        break;
        case SYS_OPEN:
        {
         	get_argument(esp,arg,1);
                f->eax=open((char*)arg[0]);
        }
        break;
        case SYS_FILESIZE:
	{
		get_argument(esp,arg,1);
                f->eax=filesize(arg[0]); 
	}
	break;
        case SYS_READ:
        {
  		get_argument(esp,arg,3);
                f->eax=read(arg[0],(void*)arg[1],arg[2]);
	}
	break;
	case SYS_WRITE:
        {

		get_argument(esp,arg,3);
                f->eax=write(arg[0],(void*)arg[1],arg[2]);	
	}
	break;
	case SYS_SEEK:
	{
		get_argument(esp,arg,2);
                seek(arg[0],(unsigned int)arg[1]);
	}
	break;
	case SYS_TELL:
	{
		get_argument(esp,arg,1);
		f->eax=tell(arg[0]);
	}
	break;
	case SYS_CLOSE:
	{
		get_argument(esp,arg,1);
		close(arg[0]);
	}
	break;
			           

  }
//thread_exit ();
}

void
check_address (void *addr)
{
//check address is in user address range
if ((unsigned int)addr <= 0x8048000 || (unsigned int)addr >= 0xc0000000)
exit(-1);
//printf("checking address!!!!!!\n");
}
void
get_argument (void *esp, int *arg, int argc)
{
int i;
for (i = 0; i < argc; i++)
{
check_address(esp);
arg[i] = *(int*)(esp);
esp=esp+4; //insert esp address to kernel stack
}
}
void
halt(void)
{
//shutdown system
shutdown_power_off();
}
void
exit (int status)
{
//exit thread
struct thread *thread_cur = thread_current(); //현재 thread 를 받아옴
printf ("%s: exit(%d)\n", thread_cur->name, status); //종료상태 출력
thread_cur->exit_status = status; //종료상태 저장
thread_exit();
}
bool
create (const char *file, unsigned int initial_size)
{
//check_address((void*)file); //if argument is pointer
if(file==NULL)
	exit(-1);
lock_acquire(&filesys_lock); //lock을 걸 어줌
bool create_result = filesys_create(file, initial_size); //create 성공 여부
lock_release(&filesys_lock); //lock을 풀어줌
return create_result;
}
bool
remove (const char *file)
{
//check_address((void*)file); //if argument is pointer
if(file==NULL)
	exit(-1);
lock_acquire(&filesys_lock); //lock을 걸 어줌
bool remove_result = filesys_remove(file); //remove성공여부
lock_release(&filesys_lock); //lock을 풀어줌
return remove_result;
}
tid_t
exec (char *process_name)
{
tid_t execute_process_tid = process_execute(process_name); //exec되는 process tid
struct thread *execute_process = get_child_process(execute_process_tid);
if (execute_process)
{
sema_down(&execute_process->load_sema);
if (execute_process->check_load)
{
return execute_process_tid;
}
else
{
return -1;
}
}
else
{
return -1;
}
}
int
wait (tid_t tid)
{
return process_wait(tid);
}
int
open (const char *file_name)
{
//check_address((void*)file_name);
if(file_name==NULL)
	exit(-1);
lock_acquire(&filesys_lock); //lock을 걸어줌
struct file *open = filesys_open(file_name); //open할 파일
if (!open)
{
lock_release(&filesys_lock); //lock을 풀어줌
return -1;
}
int open_fd = process_add_file(open);
lock_release(&filesys_lock); //lock을 풀어줌
return open_fd;
}
int
filesize (int fd)
{
lock_acquire(&filesys_lock); //lock을 걸어줌
struct file *size_check = process_get_file(fd); //size를 확인할 파일
if (!size_check)
{
lock_release(&filesys_lock); // lock을 풀어줌
return -1;
}
int file_size = file_length(size_check);
lock_release(&filesys_lock); //lock을 풀어줌
return file_size;
}
int
read (int fd, void *buffer, unsigned size)
{
struct file *read = process_get_file(fd);
//check_address(buffer);
if(buffer==NULL)
	exit(-1);
lock_acquire(&filesys_lock); //lock을 걸어줌
if (fd == 0) //stdin
{
unsigned int i;
for (i = 0; i < size; i++)
{
((char*)buffer)[i] = input_getc();
}
lock_release(&filesys_lock); //lock을 풀어줌
return size;
}
if(!read)
{
lock_release(&filesys_lock); //lock을 풀어줌
return -1;
}
int read_size = file_read(read, buffer, size); //읽어올 파일의 크기
lock_release(&filesys_lock);
return read_size;
}
int
write (int fd, void *buffer, unsigned size)
{
struct file *write = process_get_file(fd);
//check_address(buffer);
if(buffer==NULL)
	exit(-1);
lock_acquire(&filesys_lock); //lock을 걸어줌
if (fd == 1)
{
putbuf(buffer, size);
lock_release(&filesys_lock); //lock을 풀어줌
return size;
}
if(!write)
{
lock_release(&filesys_lock); //lock을 풀어줌
return -1;
}
int write_size = file_write(write, buffer, size);
lock_release(&filesys_lock); //lock을 풀어줌
return write_size;
}
void
seek (int fd, unsigned int position)
{
lock_acquire(&filesys_lock); //lock을 걸어줌
struct file *seek = process_get_file(fd);
if (!seek)
{
lock_release(&filesys_lock); //lock을 풀어줌
return;
}
file_seek(seek, position);
lock_release(&filesys_lock); //lock을 풀어줌
}
unsigned
tell (int fd)
{
lock_acquire(&filesys_lock); //lock을 걸어줌
struct file *tell_file = process_get_file(fd);
if (!tell_file)
{
lock_release(&filesys_lock); //lock을 풀어줌
return -1;
}
off_t open_pos = file_tell(tell_file);
lock_release(&filesys_lock); //lock을 풀어줌
return open_pos;
}
void
close (int fd)
{
lock_acquire(&filesys_lock); //lock을 걸어줌
process_close_file(fd);
lock_release(&filesys_lock); //lock을 풀어줌
}
